*Checking user and email of git in local machine
	>>git config user.name
	>>git config user.email
	*we can modify or assign email/user
	>>git config --global user.name "bharath143775"
	>>git config --global user.email "bharath143775@gmail.com"
*clone a repo into local machine
	>>git clone <URL>    # for private repos use personal access token in URL before github as <token@github.com>
*Create a directory and intialize it as repo
	>>mkdir my_first
	>> cd my_first
	>>git status #before intialize check whether it is in any repo and then intialize if it is not in any repo
	>>git init
	>>git add .  #push all files to stagging.in place of "." we can provide file names using space separated.
	>>git commit - m "message"    # commit files to repo and add any message for the commit.
*Check Logs of git
	>>git log
	>>git log --oneline   # we can get commit id's in single line 
*we are adding this in github to work on pull files into local
	>>git fetch     #just loads files into repo but not reflects in working directory
	>>git checkout origin/master    # we can use this to checkout what is happing in latest local repo
	#fetch can be used to get files into repo,working files will not get disturbed
	>>git fetch branch <name>
	>>git pull   # we can use this to to pull directly into local folder, if there are no conflicts
*check remote connections 
	>>git remote -v
	>>git remote add origin <URL>    # used to add remote connections
	>>git remote rename <old> <new>    # used to rename an remote connection name 
	>>git remote remove <name>       #remove connection in local
*push local repo to github
	>>git push     #we can directly if there is connection already to git
	*if we want create files in local and new repo created in github
		#first add connection and then push changes to github
		>>git remote add origin <URL>
		>>git push -u origin master/main
	>>git branch -M <new name>    #rename current branch name to new name
*working on branches
	>>git branch    #checks all  branhes in repo
	>>git branch <new>    # create a new branch with name new
	>>git log     #displays all logs
	>>git switch <name>   #used to switch from current branch to name
	>>git branch -m <new_name>    #changes current branch name to new_name
	>>git branch -D <name>  #deletes the branch from repo
*check differences in files before commiting to previous commited file
	>>git diff
	>>git diff branch1 branch2
*checkout is used to point head to various commit/branch
	>>git checkout branch/<Hashvalue of commit>   # can move to specific commit
	>>git checkout to master   #comes to latest commit in main branch
	#this helps to move to specific, So that developers create new things at that commit by creating branches.
*restore
	>>git restore <filename>   #can be traced back to previous pointed by head
	>>git restore --source HEAD~N <file>    #can be traced ro previous nth commit
	>>git restore --staged <file>
*reset
	>>removes commit after the selected commit hash
	>>git reset ####
	>>git reset --hard ####    #removes commit and files new content
*revert
	#revert creates new commit that undoes previous work.


















